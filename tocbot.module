<?php

/**
 * Implements hook_menu().
 */
function tocbot_menu() {
  $items['admin/config/content/default'] = array(
    'title' => 'Content',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/content/tocbot'] = array(
    'title' => 'Tocbot Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('tocbot_config_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  return $items;
}


//  Configuration form to update module settings
function tocbot_config_form($form, $form_state){

$form['moduleSettings'] = array(
  '#type' => 'fieldset',
  '#title' => t('Module Settings'),
  '#description' => t('Module settings to customize tocbot.'),
  '#collapsible' => FALSE,
  '#collapsed' => FALSE,
);
$form['moduleSettings']['extrabodyclass'] = [
  '#type' => 'textfield',
  '#title' => t('Extra Body Class on Activation'),
  '#description' => t('When the tocbot is activated you can add an extra class to the body to adjust the theme of your site if desired. Leave blank if you dont need this.'),
  '#default_value' => variable_get('extrabodyclass', 'toc-is-active'),
];
$form['moduleSettings']['tocTitle'] = [
  '#type' => 'textfield',
  '#title' => t('tocTitle'),
  '#description' => t('An optional title for the TOC, leave blank for none. Will be an storng with class <code>toc-title</code> so you can theme it'),
  '#default_value' => variable_get('tocTitle', 'Page Outline:'),
];
$form['moduleSettings']['minActivate'] = [
  '#type' => 'textfield',
  '#title' => t('minActivate'),
  '#description' => t('Only activate if greater than or equal to this many headings'),
  '#default_value' => variable_get('minActivate', '3'),
];




// Tocbot Settings tab.
$form['tocbotjsSettings'] = array(
  '#type' => 'fieldset',
  '#title' => t('TocBot JS Settings'),
  '#description' => t('Tocbot API settings passed to javascript <a href="https://tscanlin.github.io/tocbot/#api">See API for details</a>.'),
  '#collapsible' => FALSE,
  '#collapsed' => FALSE,
);
$form['tocbotjsSettings']['tocSelector'] = [
  '#type' => 'textfield',
  '#title' => t('tocSelector'),
  '#description' => t('Where to render the table of contents. Place an empty div with a unique class into your theme template or use this block itself by settings it to <code>.js-toc-block</code>.'),
  '#default_value' => variable_get('tocSelector', '.js-toc-block'),
];
$form['tocbotjsSettings']['contentSelector'] = [
  '#type' => 'textfield',
  '#title' => t('contentSelector'),
  '#description' => t('Where to grab the headings to build the table of contents.'),
  '#default_value' => variable_get('contentSelector', '#main-content'),
];
$form['tocbotjsSettings']['headingSelector'] = [
  '#type' => 'textfield',
  '#title' => t('headingSelector'),
  '#description' => t('Where to grab the headings to build the table of contents. Comma and space seperated <code>h2, h3, h4, h5, h6</code>'),
  '#default_value' => variable_get('headingSelector', 'h2, h3, h4, h5, h6'),
];
$form['tocbotjsSettings']['ignoreSelector'] = [
  '#type' => 'textfield',
  '#title' => t('ignoreSelector'),
  '#description' => t('Headings that match the ignoreSelector will be skipped.'),
  '#default_value' => variable_get('ignoreSelector', '.js-toc-ignore'),
];
$form['tocbotjsSettings']['linkClass'] = [
  '#type' => 'textfield',
  '#title' => t('linkClass'),
  '#description' => t('Main class to add to links.'),
  '#default_value' => variable_get('linkClass', 'toc-link'),
];
$form['tocbotjsSettings']['extraLinkClasses'] = [
  '#type' => 'textfield',
  '#title' => t('extraLinkClasses'),
  '#description' => t('Extra classes to add to links.'),
  '#default_value' => variable_get('extraLinkClasses', ''),
];
$form['tocbotjsSettings']['activeLinkClass'] = [
  '#type' => 'textfield',
  '#title' => t('activeLinkClass'),
  '#description' => t('Class to add to active links, the link corresponding to the top most heading on the page.'),
  '#default_value' => variable_get('activeLinkClass', 'is-active-link'),
];
$form['tocbotjsSettings']['listClass'] = [
  '#type' => 'textfield',
  '#title' => t('listClass'),
  '#description' => t('Main class to add to lists.'),
  '#default_value' => variable_get('listClass', 'toc-list'),
];
$form['tocbotjsSettings']['extraListClasses'] = [
  '#type' => 'textfield',
  '#title' => t('extraListClasses'),
  '#description' => t('Extra classes to add to lists.'),
  '#default_value' => variable_get('extraListClasses', ''),
];
$form['tocbotjsSettings']['isCollapsedClass'] = [
  '#type' => 'textfield',
  '#title' => t('isCollapsedClass'),
  '#description' => t('Class that gets added when a list should be collapsed.'),
  '#default_value' => variable_get('isCollapsedClass', 'is-collapsed'),
];
$form['tocbotjsSettings']['collapsibleClass'] = [
  '#type' => 'textfield',
  '#title' => t('collapsibleClass'),
  '#description' => t('Class that gets added when a list should be able to be collapsed but isn\'t necessarily collapsed.'),
  '#default_value' => variable_get('collapsibleClass', 'is-collapsible'),
];
$form['tocbotjsSettings']['listItemClass'] = [
  '#type' => 'textfield',
  '#title' => t('listItemClass'),
  '#description' => t('Class to add to list items.'),
  '#default_value' => variable_get('listItemClass', 'toc-list-item'),
];
$form['tocbotjsSettings']['collapseDepth'] = [
  '#type' => 'textfield',
  '#title' => t('collapseDepth'),
  '#description' => t('Class to add to list items.'),
  '#default_value' => variable_get('collapseDepth', '0'),
];
$form['tocbotjsSettings']['orderedList'] = [
  '#type' => 'checkbox',
  '#title' => t('orderedList'),
  '#description' => t('OrderedList can be set to false to generate unordered lists (ul) instead of ordered lists (ol).'),
  '#default_value' => variable_get('orderedList', 0),
];
$form['tocbotjsSettings']['scrollSmooth'] = [
  '#type' => 'checkbox',
  '#title' => t('scrollSmooth'),
  '#description' => t('Smooth scrolling enabled.'),
  '#default_value' => variable_get('scrollSmooth', 1),
];
$form['tocbotjsSettings']['scrollSmoothDuration'] = [
  '#type' => 'textfield',
  '#title' => t('scrollSmoothDuration'),
  '#description' => t('Smooth scroll duration.'),
  '#default_value' => variable_get('scrollSmoothDuration', '420'),
];
$form['tocbotjsSettings']['throttleTimeout'] = [
  '#type' => 'textfield',
  '#title' => t('throttleTimeout'),
  '#description' => t('Timeout between events firing to make sure its not too rapid (for performance reasons)'),
  '#default_value' => variable_get('throttleTimeout', '50'),
];
$form['tocbotjsSettings']['positionFixedSelector'] = [
  '#type' => 'textfield',
  '#title' => t('positionFixedSelector'),
  '#description' => t('Element to add the positionFixedClass to.'),
  '#default_value' => variable_get('positionFixedSelector', '.js-toc'),
];
$form['tocbotjsSettings']['positionFixedClass'] = [
  '#type' => 'textfield',
  '#title' => t('positionFixedClass'),
  '#description' => t('Fixed position class to add to make sidebar fixed after scrolling down past the fixedSidebarOffset.'),
  '#default_value' => variable_get('positionFixedClass', 'is-position-fixed'),
];
$form['tocbotjsSettings']['fixedSidebarOffset'] = [
  '#type' => 'textfield',
  '#title' => t('fixedSidebarOffset'),
  '#description' => t('fixedSidebarOffset can be any number but by default is set to auto which sets the fixedSidebarOffset to the sidebar elements offsetTop from the top of the document on init.'),
  '#default_value' => variable_get('fixedSidebarOffset', 'auto'),
];
$form['tocbotjsSettings']['includeHtml'] = [
  '#type' => 'checkbox',
  '#title' => t('includeHtml'),
  '#description' => t('includeHtml can be set to true to include the HTML markup from the heading node instead of just including the textContent.'),
  '#default_value' => variable_get('includeHtml', 0),
];



$form['actions']['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Save'),
);
return $form;
}

function tocbot_config_form_submit($form, $form_state){

  $fieldsToSave = [
    'extrabodyclass',
    'tocTitle',
    'minActivate',
    'tocSelector',
    'contentSelector',
    'headingSelector',
    'ignoreSelector',
    'linkClass',
    'extraLinkClasses',
    'activeLinkClass',
    'listClass',
    'extraListClasses',
    'isCollapsedClass',
    'collapsibleClass',
    'listItemClass',
    'collapseDepth',
    'orderedList',
    'scrollSmooth',
    'scrollSmoothDuration',
    'throttleTimeout',
    'positionFixedSelector',
    'positionFixedClass',
    'fixedSidebarOffset',
  ];

  foreach ($fieldsToSave as $value) {
    $formValue = $form_state['values'][$value];
    variable_set($value, $formValue);
  }

}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */

function tocbot_libraries_info() {

  // A very simple library.
  // Expected to be extracted into 'sites/all/libraries/tocbot'.
  $libraries['tocbot'] = array(
    'name' => 'tocbot',
    'vendor url' => 'https://tscanlin.github.io/tocbot/',
    'download url' => 'https://github.com/tscanlin/tocbot/releases/',
    'version' => '4.3.1',
    'path' => 'tocbot',
    'files' => array(
      'js' => array('tocbot.min.js'),
      'css' => array('tocbot.css'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function tocbot_block_info() {

  $blocks = array();
  $blocks['tocbot_block'] = array(
    'info' => t('tocbot block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tocbot_block_view($delta='') {
  $settings = [];

  // Load current configuration.
  $selector = variable_get('tocSelector', '.js-toc-block');


// Gather settings to send to tocbot-init
$settings['extrabodyclass'] = variable_get('extrabodyclass', 'toc-is-active');
$settings['tocTitle'] = variable_get('tocTitle', 'Page Outline:');
$settings['minActivate'] = variable_get('minActivate', '3');
$settings['options']['tocSelector'] = variable_get('tocSelector', '.js-toc-block');
$settings['options']['contentSelector'] = variable_get('contentSelector', '#main-content');
$settings['options']['headingSelector'] = variable_get('headingSelector', 'h2, h3, h4, h5, h6');
$settings['options']['ignoreSelector'] = variable_get('ignoreSelector', '.js-toc-ignore');
$settings['options']['linkClass'] = variable_get('linkClass', 'toc-link');
$settings['options']['extraLinkClasses'] = variable_get('extraLinkClasses', '');
$settings['options']['activeLinkClass'] = variable_get('activeLinkClass', 'is-active-link');
$settings['options']['listClass'] = variable_get('listClass', 'toc-list');
$settings['options']['extraListClasses'] = variable_get('extraListClasses', '');
$settings['options']['isCollapsedClass'] = variable_get('isCollapsedClass', 'is-collapsed');
$settings['options']['collapsibleClass'] = variable_get('collapsibleClass', 'is-collapsible');
$settings['options']['listItemClass'] = variable_get('listItemClass', 'toc-list-item');
$settings['options']['collapseDepth'] = variable_get('collapseDepth', '0');
$settings['options']['orderedList'] = variable_get('orderedList', 0);
$settings['options']['scrollSmooth'] = variable_get('scrollSmooth', 1);
$settings['options']['scrollSmoothDuration'] = variable_get('scrollSmoothDuration', '420');
$settings['options']['throttleTimeout'] = variable_get('throttleTimeout', '50');
$settings['options']['positionFixedSelector'] = variable_get('positionFixedSelector', '.js-toc');
$settings['options']['positionFixedClass'] = variable_get('positionFixedClass', 'is-position-fixed');
$settings['options']['fixedSidebarOffset'] = variable_get('fixedSidebarOffset', 'auto');
$settings['options']['includeHtml'] = variable_get('includeHtml', 0);

$attached = array();

  // load library
  if (file_exists(libraries_get_path('tocbot') . '/sites/all/libraries/tocbot/js/tocbot.min.js')) {
    $attached['js'] = array(libraries_get_path('tocbot').'/sites/all/libraries/tocbot/js/tocbot.min.js' => array(
      'weight' => -20,
    ));
  }
  else {
    $attached['js'] = array("https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.4.2/tocbot.min.js" => array('type' => 'external', 'weight' => -20,));
  }
  // load css
  if (file_exists(libraries_get_path('tocbot') . '/sites/all/libraries/tocbot/css/tocbot.css')) {
    $attached['css'] = array(libraries_get_path('tocbot').'/sites/all/libraries/tocbot/css/tocbot.css' => array(
      'weight' => -20,
    ));
  }
  else {
    $attached['css'] = array('https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.4.2/tocbot.css' => array(
      'type' => 'external',
      'weight' => -20,
    ));
  }

  $attached['js'][drupal_get_path('module', 'tocbot') . '/js/tocbot-init.js'] = array(
    'scope' => 'footer',
    'weight' => 5,
  );

  //Send settings to Javascript
  $attached['js'][] = array('data' => array('tocbot' => $settings), 'type' => 'setting');


  $block = array();

  switch($delta) {
    case 'tocbot_block' :
      // $block['subject'] = t('tocbot block');
      $block['content'] = array(
        '#markup' => tocbot_content(),
        '#attached' => $attached
      );
      break;
  }

  return $block;
}
/**
 * Implements hook_content().
 */
function tocbot_content() {
  return '<div class="js-toc-block-wrapper"><div class="js-toc-block"></div></div>';
}
